scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type MetaBoard {
  id: Bytes!
  address: Bytes!
  metas(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaV1_orderBy
    orderDirection: OrderDirection
    where: MetaV1_filter
  ): [MetaV1!]
  nextMetaId: BigInt!
}

input MetaBoard_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  metas_: MetaV1_filter
  nextMetaId: BigInt
  nextMetaId_not: BigInt
  nextMetaId_gt: BigInt
  nextMetaId_lt: BigInt
  nextMetaId_gte: BigInt
  nextMetaId_lte: BigInt
  nextMetaId_in: [BigInt!]
  nextMetaId_not_in: [BigInt!]
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [MetaBoard_filter]
  or: [MetaBoard_filter]
}

enum MetaBoard_orderBy {
  id
  address
  metas
  nextMetaId
}

type MetaV1 {
  id: ID!
  metaBoard: MetaBoard!
  sender: Bytes!
  subject: BigInt!
  metaHash: Bytes!
  meta: Bytes!
}

input MetaV1_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  metaBoard: String
  metaBoard_not: String
  metaBoard_gt: String
  metaBoard_lt: String
  metaBoard_gte: String
  metaBoard_lte: String
  metaBoard_in: [String!]
  metaBoard_not_in: [String!]
  metaBoard_contains: String
  metaBoard_contains_nocase: String
  metaBoard_not_contains: String
  metaBoard_not_contains_nocase: String
  metaBoard_starts_with: String
  metaBoard_starts_with_nocase: String
  metaBoard_not_starts_with: String
  metaBoard_not_starts_with_nocase: String
  metaBoard_ends_with: String
  metaBoard_ends_with_nocase: String
  metaBoard_not_ends_with: String
  metaBoard_not_ends_with_nocase: String
  metaBoard_: MetaBoard_filter
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  subject: BigInt
  subject_not: BigInt
  subject_gt: BigInt
  subject_lt: BigInt
  subject_gte: BigInt
  subject_lte: BigInt
  subject_in: [BigInt!]
  subject_not_in: [BigInt!]
  metaHash: Bytes
  metaHash_not: Bytes
  metaHash_gt: Bytes
  metaHash_lt: Bytes
  metaHash_gte: Bytes
  metaHash_lte: Bytes
  metaHash_in: [Bytes!]
  metaHash_not_in: [Bytes!]
  metaHash_contains: Bytes
  metaHash_not_contains: Bytes
  meta: Bytes
  meta_not: Bytes
  meta_gt: Bytes
  meta_lt: Bytes
  meta_gte: Bytes
  meta_lte: Bytes
  meta_in: [Bytes!]
  meta_not_in: [Bytes!]
  meta_contains: Bytes
  meta_not_contains: Bytes
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [MetaV1_filter]
  or: [MetaV1_filter]
}

enum MetaV1_orderBy {
  id
  metaBoard
  metaBoard__id
  metaBoard__address
  metaBoard__nextMetaId
  sender
  subject
  metaHash
  meta
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type Query {
  metaBoard(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaBoard
  metaBoards(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaBoard_orderBy
    orderDirection: OrderDirection
    where: MetaBoard_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaBoard!]!
  metaV1(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaV1
  metaV1S(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaV1_orderBy
    orderDirection: OrderDirection
    where: MetaV1_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaV1!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type Subscription {
  metaBoard(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaBoard
  metaBoards(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaBoard_orderBy
    orderDirection: OrderDirection
    where: MetaBoard_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaBoard!]!
  metaV1(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetaV1
  metaV1S(
    skip: Int = 0
    first: Int = 100
    orderBy: MetaV1_orderBy
    orderDirection: OrderDirection
    where: MetaV1_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetaV1!]!
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes
  """
  The block number
  """
  number: Int!
  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block

  """
  block: _Block_!
  """
  The deployment ID
  """
  deployment: String!
  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

